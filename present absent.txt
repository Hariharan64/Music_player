user Qr staff present days count
______________________________
1. Update Firebase Structure
We'll store two additional fields under each user: presentCount and absentCount.

2. Modify AttendanceActivity to Track Present and Absent Days
You will need to modify the AttendanceActivity to update the present and absent counts when a punch-in occurs or is missed.

Step 1: Update Your XML Layout
Ensure your XML layout includes TextView elements to display the present and absent counts:

xml
Copy code
<!-- res/layout/activity_attendance.xml -->
<LinearLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal"
    android:padding="16dp">

    <TextView
        android:id="@+id/presentCount"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Present: 0"
        android:textSize="16sp" />

    <TextView
        android:id="@+id/absentCount"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="20dp"
        android:text="Absent: 0"
        android:textSize="16sp" />
</LinearLayout>
Step 2: Update the AttendanceActivity Java Code
Modify your AttendanceActivity class to update the present and absent counts based on punch-ins.

java
Copy code
public class AttendanceActivity extends AppCompatActivity {

    private GridView gridViewCalendar;
    private Button punchInButton, punchOutButton, btn;
    private DatabaseReference databaseReference;
    private String selectedDate;
    private String userId; // Unique ID for the current user
    private ArrayList<String> dates;
    private CalendarAdapter calendarAdapter;
    private Map<String, String> dateStatusMap;
    private TextView textViewUsers, presentCountView, absentCountView;

    @SuppressLint("MissingInflatedId")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_attendance);

        TextView shiftTimings = findViewById(R.id.shiftTimings);
        shiftTimings.setText("Shift Timings: 09:00 AM - 07:00 PM");

        // Initialize UI elements
        textViewUsers = findViewById(R.id.textViewUsers);
        presentCountView = findViewById(R.id.presentCount);
        absentCountView = findViewById(R.id.absentCount);

        // Initialize views
        gridViewCalendar = findViewById(R.id.gridViewCalendar);
        punchInButton = findViewById(R.id.punchInButton);
        punchOutButton = findViewById(R.id.punchOutButton);
        btn = findViewById(R.id.btn);

        btn.setOnClickListener(v -> {
            Intent intent = new Intent(AttendanceActivity.this, HomeActivity.class);
            startActivity(intent);
        });

        // Retrieve the user ID (you should set this based on actual user login or selection)
        userId = "user1"; // This should be dynamically set based on the logged-in user

        // Initialize Firebase reference
        databaseReference = FirebaseDatabase.getInstance().getReference("Attendance");

        // Initialize calendar dates and statuses
        dates = new ArrayList<>();
        dateStatusMap = new HashMap<>();
        populateCalendarDates();

        // Set calendar adapter
        calendarAdapter = new CalendarAdapter(this, dates, dateStatusMap);
        gridViewCalendar.setAdapter(calendarAdapter);

        // Load statuses from Firebase
        fetchStatusFromFirebase();

        // Calendar item click listener
        gridViewCalendar.setOnItemClickListener((parent, view, position, id) -> {
            selectedDate = dates.get(position);
            calendarAdapter.setSelectedDate(selectedDate);
        });

        // Punch In button click event
        punchInButton.setOnClickListener(v -> scanQRCode(true));

        // Punch Out button click event
        punchOutButton.setOnClickListener(v -> scanQRCode(false));
    }

    private void populateCalendarDates() {
        for (int i = 1; i <= 31; i++) {
            dates.add(String.format("2024-08-%02d", i)); // Example for August 2024
        }
    }

    private void scanQRCode(boolean isPunchIn) {
        Intent intent = new Intent(this, QRCodeScannerActivity.class);
        intent.putExtra("isPunchIn", isPunchIn);
        startActivityForResult(intent, 101);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 101 && resultCode == RESULT_OK) {
            boolean isPunchIn = data.getBooleanExtra("isPunchIn", true);
            recordPunch(isPunchIn);
        }
    }

    private void recordPunch(boolean isPunchIn) {
        // Automatically select today's date when punching in
        if (isPunchIn) {
            selectedDate = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date());
            calendarAdapter.setSelectedDate(selectedDate);
        }

        if (selectedDate == null) {
            Toast.makeText(this, "Please select a date first!", Toast.LENGTH_SHORT).show();
            return;
        }

        String currentTime = new SimpleDateFormat("hh:mm a", Locale.getDefault()).format(new Date());
        DatabaseReference dateRef = databaseReference.child(userId).child(selectedDate);

        if (isPunchIn) {
            dateRef.child("punchInTime").setValue(currentTime);
            dateRef.child("status").setValue("punch_in"); // Save status as "punch_in" in Firebase
            updatePresentCount();
            Toast.makeText(this, "Punch In Recorded", Toast.LENGTH_SHORT).show();
            calendarAdapter.setHighlightedDate(selectedDate); // Highlight date as punch-in (blue)
        } else {
            dateRef.child("punchOutTime").setValue(currentTime);
            dateRef.child("status").setValue("punch_out"); // Save status as "punch_out" in Firebase
            calculateTotalTime(dateRef);
            Toast.makeText(this, "Punch Out Recorded", Toast.LENGTH_SHORT).show();
            calendarAdapter.setHighlightedDate(selectedDate); // Update the highlighted date to green
        }
    }

    private void updatePresentCount() {
        DatabaseReference userRef = databaseReference.child(userId);
        userRef.child("presentCount").addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                Long currentCount = snapshot.getValue(Long.class);
                if (currentCount == null) {
                    currentCount = 0L;
                }
                userRef.child("presentCount").setValue(currentCount + 1);
                presentCountView.setText("Present: " + (currentCount + 1));
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Toast.makeText(AttendanceActivity.this, "Failed to update present count", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void updateAbsentCount() {
        DatabaseReference userRef = databaseReference.child(userId);
        userRef.child("absentCount").addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                Long currentCount = snapshot.getValue(Long.class);
                if (currentCount == null) {
                    currentCount = 0L;
                }
                userRef.child("absentCount").setValue(currentCount + 1);
                absentCountView.setText("Absent: " + (currentCount + 1));
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Toast.makeText(AttendanceActivity.this, "Failed to update absent count", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void fetchStatusFromFirebase() {
        databaseReference.child(userId).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                dateStatusMap.clear();
                for (DataSnapshot dateSnapshot : snapshot.getChildren()) {
                    String date = dateSnapshot.getKey();
                    String status = dateSnapshot.child("status").getValue(String.class); // Retrieve status from Firebase
                    if (status != null) {
                        dateStatusMap.put(date, status);
                    }
                }
                calendarAdapter.notifyDataSetChanged(); // Refresh the calendar view

                // Update the present and absent counts in the UI
                Long presentCount = snapshot.child("presentCount").getValue(Long.class);
                Long absentCount = snapshot.child("absentCount").getValue(Long.class);

                presentCountView.setText("Present: " + (presentCount != null ? presentCount : 0));
                absentCountView.setText("Absent: " + (absentCount != null ? absentCount : 0));
            }

java
Copy code
            @Override
            public void onCancelled(DatabaseError error) {
                // Handle possible errors
            }
        });

        // Initialize Firebase Database reference for user details
        DatabaseReference userDatabaseReference = FirebaseDatabase.getInstance().getReference("Users");

        // Retrieve user details from Firebase
        userDatabaseReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                StringBuilder userData = new StringBuilder();
                for (DataSnapshot userSnapshot : dataSnapshot.getChildren()) {
                    String name = userSnapshot.child("name").getValue(String.class);
                    String email = userSnapshot.child("email").getValue(String.class);
                    userData.append("Name: ").append(name).append("\n")
                            .append("Email: ").append(email).append("\n\n");
                }
                textViewUsers.setText(userData.toString());
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Log.e("AttendanceActivity", "Failed to retrieve data", databaseError.toException());
            }
        });
    }
    
    // Method to check and update the absent count for days without punch-ins
    private void checkForAbsentDays() {
        DatabaseReference userRef = databaseReference.child(userId);
        String todayDate = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date());

        userRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                // Iterate through all days in the current month
                for (String date : dates) {
                    if (!snapshot.hasChild(date) && date.compareTo(todayDate) < 0) {
                        updateAbsentCount();
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Toast.makeText(AttendanceActivity.this, "Failed to check absent days", Toast.LENGTH_SHORT).show();
            }
        });
    }

    @Override
    protected void onResume() {
        super.onResume();
        // Check for absent days when the activity resumes
        checkForAbsentDays();
    }
}

________________+||+|||++++++++++++++++++________________
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">


    <GridView
        android:id="@+id/gridViewCalendar"
        android:layout_width="wrap_content"
        android:layout_height="320dp"
        android:layout_alignParentTop="true"
        android:gravity="center"
        android:horizontalSpacing="8dp"
        android:numColumns="7"
        android:padding="8dp"
        android:visibility="gone"
        android:stretchMode="columnWidth"
        android:verticalSpacing="8dp" />

    <ImageView
        android:id="@+id/image"
        android:layout_width="100dp"
        android:layout_marginStart="10dp"
        android:layout_height="100dp"
        android:layout_marginTop="20dp"
        android:src="@drawable/baseline_person_pin_24"

        />




        <Button
            android:contentDescription="heloo"
            android:id="@+id/btn"
            android:layout_marginTop="140dp"
            android:layout_width="100dp"
            android:layout_height="90dp"
            />

        <TextView
            android:id="@+id/presentCount"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Present: 0"
            android:layout_marginTop="180dp"
            android:textColor="@color/colorOnPrimary"
            android:layout_marginStart="15dp"
            android:textSize="16sp" />

    <Button
        android:contentDescription="heaa"
        android:id="@+id/absent"
        android:layout_marginTop="140dp"
        android:layout_width="100dp"
        android:layout_height="90dp"
        android:layout_marginStart="130dp"
        />


    <TextView
            android:id="@+id/absentCount"
        android:layout_marginTop="180dp"
        android:layout_width="wrap_content"
        android:textColor="@color/colorOnPrimary"
            android:layout_height="wrap_content"
            android:layout_marginStart="145dp"
            android:text="Absent: 0"
            android:textSize="16sp" />

    <Button
        android:contentDescription="hbe"
        android:id="@+id/leave"
        android:layout_marginTop="140dp"
        android:layout_width="100dp"
        android:layout_height="90dp"
        android:layout_marginStart="260dp"
        />

    <TextView
        android:id="@+id/leavecount"
        android:layout_marginTop="180dp"
        android:layout_width="wrap_content"
        android:textColor="@color/colorOnPrimary"
        android:layout_height="wrap_content"
        android:layout_marginStart="279dp"
        android:text="Leave: 0"
        android:textSize="16sp" />





    <Button
            android:id="@+id/punchInButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="300dp"
            android:layout_alignParentLeft="true"
            android:layout_marginStart="140dp"
            android:text="Punch In"/>

        <Button
            android:id="@+id/punchOutButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="140dp"
            android:layout_marginTop="390dp"
            android:text="Punch Out"/>

    <TextView
        android:id="@+id/shiftTimings"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Shift Timings: 09:00 AM - 07:00 PM"
        android:layout_marginTop="500dp"
        />







</RelativeLayout>
